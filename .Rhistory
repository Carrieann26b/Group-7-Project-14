glimpse(gapminder2007)
gapminder2007|> select(continent, lifeExp) |> skim()
lifeExp.continent <- gapminder2007 |> summarise(median = median(lifeExp),
mean = mean(lifeExp),
.by = continent)
ggplot(gapminder2007, aes(x = continent, y = lifeExp)) +
geom_boxplot() +
labs(x = "Continent", y = "Life expectancy (years)",
title = "Life expectancy by continent")
####Formal analysis####
lifeExp.model <- linear_reg() |>
fit(lifeExp ~ continent, data = gapminder2007)
####Assessing model fit####
regression_points2 <- get_regression_points(lifeExp.model$fit)
ggplot(regression_points2, aes(x = continent, y = residual)) +
geom_jitter(width = 0.1) +
labs(x = "continent", "Residual") +
geom_hline(yintercept = 0, col = "blue")
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 5, color = "white") +
labs(x = "Residual")
####Multiple regression with two numerical explanatory variables####
library(ISLR)
install.packages("ISLR")
data("Credit")
Cred <- Credit |> select(Balance, Limit, Income)
skim(Cred)
cor(Cred)
#typically remove highly correlated variables (can look at relationships through pairs function
#but this time will leave all variables in)
ggplot(Cred, aes(x = Limit, y = Balance)) +
geom_point() +
labs(x = "Credit Limit ($)", y = "Credit Card Balance ($)",
title = "Relationship between balance and credit limit") +
geom_smooth(method = "lm", se = FALSE)
ggplot(Cred, aes(x = Income, y = Balance)) +
geom_point() +
labs(x = "Income ($1000)", y = "Credit Card Balance ($)",
title = "Relationship between balance and credit limit") +
geom_smooth(method = "lm", se = FALSE)
library(plotly)
install.packages("plotly")
plot_ly(Cred, x = ~Income, y = ~Limit, z = ~Balance,
type = "scatter3d", mode = "markers")
plot_ly(Cred, x = ~Income, y = ~Limit, z = ~Balance,
type = "scatter3d", mode = "markers")
install.packages("installr")
library(installr)
updateR()
####formal analysis####
Balance.model <- linear_reg()  |>  fit(Balance ~ Limit + Income, data = Cred)
##simple linear regression
## y(i) = a + Bx(i)  + e(i)
library(tidyverse)
install.packages("tidymodels")
library(tidymodels)
install.packages("moderndive")
library(moderndive)
install.packages("skimr")
library(skimr)
install.packages("gapminder")
library(gapminder)
n <- 463
####SLR one numerical explanatory variable####
#1 look at the raw values of the data, either on R or the spreadsheet directly
#2 compute various summary statistics (5-num summary, means and sd)
#plot the data using various data visualisation techniques
view(evals)
evals.scores <- evals |> select(score, bty_avg)
skim(evals.scores)
####correlation####
#-1 = perfect negative relationship
#0 = no relationship
#1 = perfect positive relationship
evals.scores |> get_correlation(score ~ bty_avg)
# Correlation coefficient       Verbal interpretation
# 0.90 to 1.00 (-0.90 to -1.00)	Very strong positive (negative) correlation
# 0.70 to 0.90 (-0.70 to -0.90)	Strong positive (negative) correlation
# 0.50 to 0.70 (-0.50 to -0.70)	Moderate positive (negative) correlation
# 0.30 to 0.50 (-0.30 to -0.50)	Weak positive (negative) correlation
# 0.00 to 0.http://127.0.0.1:32287/graphics/plot_zoom_png?width=791&height=83030 (0.00 to -0.30)	Very weak positive (negative) correlation
# the function "cor" can also be used to compute the correlation coefficient
ggplot(evals.scores, aes(x = bty_avg, y = score)) +
geom_point()
#regular scatter plots sometimes over plot the data and so we lose some of the variability
#to alleviate this, use jittered scatter plots. does not change the values but is merely a visualisation technique
####formal analysis####
model <- linear_reg() |> fit(score~bty_avg, data = evals.scores)
model$fit
#score(est.) = a(est.) + B(est.)*x(i) = 3.88034 + 0.06664*bty_avg
tidy(model)
ggplot(evals.scores, aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score", y = "Teaching Score",
title = "Relationship of teching and beauty scores") +
geom_smooth(method = "lm", se = FALSE)
#geom smooth adds the line of best fit
regression_points <- get_regression_points(model$fit)
regression_points
#### assessing model fit####
ggplot(regression_points, aes(x= bty_avg, y = residual))+
geom_point() +
labs(x = "Beauty Score", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", linewidth = 1)
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, colour = "white") +
labs(x = "residual")
####SLR one categorical explanatory variable####
gapminder2007 <- gapminder |>
dplyr::filter(year == 2007) |>
select(country, continent, lifeExp)
glimpse(gapminder2007)
gapminder2007|> select(continent, lifeExp) |> skim()
lifeExp.continent <- gapminder2007 |> summarise(median = median(lifeExp),
mean = mean(lifeExp),
.by = continent)
ggplot(gapminder2007, aes(x = continent, y = lifeExp)) +
geom_boxplot() +
labs(x = "Continent", y = "Life expectancy (years)",
title = "Life expectancy by continent")
####Formal analysis####
lifeExp.model <- linear_reg() |>
fit(lifeExp ~ continent, data = gapminder2007)
####Assessing model fit####
regression_points2 <- get_regression_points(lifeExp.model$fit)
ggplot(regression_points2, aes(x = continent, y = residual)) +
geom_jitter(width = 0.1) +
labs(x = "continent", "Residual") +
geom_hline(yintercept = 0, col = "blue")
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 5, color = "white") +
labs(x = "Residual")
####Multiple regression with two numerical explanatory variables####
library(ISLR)
install.packages("ISLR")
data("Credit")
Cred <- Credit |> select(Balance, Limit, Income)
skim(Cred)
cor(Cred)
#typically remove highly correlated variables (can look at relationships through pairs function
#but this time will leave all variables in)
ggplot(Cred, aes(x = Limit, y = Balance)) +
geom_point() +
labs(x = "Credit Limit ($)", y = "Credit Card Balance ($)",
title = "Relationship between balance and credit limit") +
geom_smooth(method = "lm", se = FALSE)
ggplot(Cred, aes(x = Income, y = Balance)) +
geom_point() +
labs(x = "Income ($1000)", y = "Credit Card Balance ($)",
title = "Relationship between balance and credit limit") +
geom_smooth(method = "lm", se = FALSE)
library(plotly)
install.packages("plotly")
plot_ly(Cred, x = ~Income, y = ~Limit, z = ~Balance,
type = "scatter3d", mode = "markers")
plot_ly(Cred, x = ~Income, y = ~Limit, z = ~Balance,
type = "scatter3d", mode = "markers")
####formal analysis####
Balance.model <- linear_reg()  |>  fit(Balance ~ Limit + Income, data = Cred)
tidy(Balance.model$fit)
install.packages("plotly")
install.packages("ISLR")
install.packages("gapminder")
install.packages("skimr")
##simple linear regression
## y(i) = a + Bx(i)  + e(i)
library(tidyverse)
library(tidymodels)
library(moderndive)
library(skimr)
library(gapminder)
n <- 463
####SLR one numerical explanatory variable####
#1 look at the raw values of the data, either on R or the spreadsheet directly
#2 compute various summary statistics (5-num summary, means and sd)
#plot the data using various data visualisation techniques
view(evals)
evals.scores <- evals |> select(score, bty_avg)
skim(evals.scores)
####correlation####
#-1 = perfect negative relationship
#0 = no relationship
#1 = perfect positive relationship
evals.scores |> get_correlation(score ~ bty_avg)
# Correlation coefficient       Verbal interpretation
# 0.90 to 1.00 (-0.90 to -1.00)	Very strong positive (negative) correlation
# 0.70 to 0.90 (-0.70 to -0.90)	Strong positive (negative) correlation
# 0.50 to 0.70 (-0.50 to -0.70)	Moderate positive (negative) correlation
# 0.30 to 0.50 (-0.30 to -0.50)	Weak positive (negative) correlation
# 0.00 to 0.http://127.0.0.1:32287/graphics/plot_zoom_png?width=791&height=83030 (0.00 to -0.30)	Very weak positive (negative) correlation
# the function "cor" can also be used to compute the correlation coefficient
ggplot(evals.scores, aes(x = bty_avg, y = score)) +
geom_point()
#regular scatter plots sometimes over plot the data and so we lose some of the variability
#to alleviate this, use jittered scatter plots. does not change the values but is merely a visualisation technique
####formal analysis####
model <- linear_reg() |> fit(score~bty_avg, data = evals.scores)
model$fit
#score(est.) = a(est.) + B(est.)*x(i) = 3.88034 + 0.06664*bty_avg
tidy(model)
ggplot(evals.scores, aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score", y = "Teaching Score",
title = "Relationship of teching and beauty scores") +
geom_smooth(method = "lm", se = FALSE)
#geom smooth adds the line of best fit
regression_points <- get_regression_points(model$fit)
regression_points
#### assessing model fit####
ggplot(regression_points, aes(x= bty_avg, y = residual))+
geom_point() +
labs(x = "Beauty Score", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", linewidth = 1)
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, colour = "white") +
labs(x = "residual")
####SLR one categorical explanatory variable####
gapminder2007 <- gapminder |>
dplyr::filter(year == 2007) |>
select(country, continent, lifeExp)
glimpse(gapminder2007)
gapminder2007|> select(continent, lifeExp) |> skim()
lifeExp.continent <- gapminder2007 |> summarise(median = median(lifeExp),
mean = mean(lifeExp),
.by = continent)
ggplot(gapminder2007, aes(x = continent, y = lifeExp)) +
geom_boxplot() +
labs(x = "Continent", y = "Life expectancy (years)",
title = "Life expectancy by continent")
####Formal analysis####
lifeExp.model <- linear_reg() |>
fit(lifeExp ~ continent, data = gapminder2007)
####Assessing model fit####
regression_points2 <- get_regression_points(lifeExp.model$fit)
ggplot(regression_points2, aes(x = continent, y = residual)) +
geom_jitter(width = 0.1) +
labs(x = "continent", "Residual") +
geom_hline(yintercept = 0, col = "blue")
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 5, color = "white") +
labs(x = "Residual")
####Multiple regression with two numerical explanatory variables####
library(ISLR)
data("Credit")
Cred <- Credit |> select(Balance, Limit, Income)
skim(Cred)
cor(Cred)
#typically remove highly correlated variables (can look at relationships through pairs function
#but this time will leave all variables in)
ggplot(Cred, aes(x = Limit, y = Balance)) +
geom_point() +
labs(x = "Credit Limit ($)", y = "Credit Card Balance ($)",
title = "Relationship between balance and credit limit") +
geom_smooth(method = "lm", se = FALSE)
ggplot(Cred, aes(x = Income, y = Balance)) +
geom_point() +
labs(x = "Income ($1000)", y = "Credit Card Balance ($)",
title = "Relationship between balance and credit limit") +
geom_smooth(method = "lm", se = FALSE)
library(plotly)
plot_ly(Cred, x = ~Income, y = ~Limit, z = ~Balance,
type = "scatter3d", mode = "markers")
plot_ly(Cred, x = ~Income, y = ~Limit, z = ~Balance,
type = "scatter3d", mode = "markers")
####formal analysis####
Balance.model <- linear_reg()  |>  fit(Balance ~ Limit + Income, data = Cred)
tidy(Balance.model$fit)
regressio_points3 <- get_regression_points(Balance.model$fit)
ggplot(regression.points, aes(x = Limit, y = residual)) +
geom_point() +
labs(x = "Credit limit (in $)", y = "Residual", title = "Residuals vs credit limit")  +
geom_hline(yintercept = 0, col = "blue", linewidth = 1)
ggplot(regression_points3, aes(x = Limit, y = residual)) +
geom_point() +
labs(x = "Credit limit (in $)", y = "Residual", title = "Residuals vs credit limit")  +
geom_hline(yintercept = 0, col = "blue", linewidth = 1)
ggplot(regressio_points3, aes(x = Limit, y = residual)) +
geom_point() +
labs(x = "Credit limit (in $)", y = "Residual", title = "Residuals vs credit limit")  +
geom_hline(yintercept = 0, col = "blue", linewidth = 1)
ggplot(regressio_points3, aes(x = Income, y = residual)) +
geom_point() +
labs(x = "Credit limit (in $)", y = "Residual", title = "Residuals vs credit limit")  +
geom_hline(yintercept = 0, col = "blue", linewidth = 1)
ggplot(regressio_points3, aes(x = Income, y = residual)) +
geom_point() +
labs(x = "Income(in $1000)", y = "Residual", title = "Residuals vs credit limit")  +
geom_hline(yintercept = 0, col = "blue", linewidth = 1)
autoplot(Balance.model$fit)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(Balance.model$fit)
####TASKS####
#1
evals.tsk1 <- evals|> select(score, age)
cor(evals.tsk1)
#very weak negative correlation
ggplot(evals.tsk1, aes(x = age, y = score)) +
geom_point() +
labs(x = "Age", y = "Score",
title = "Relationship between score and age") +
geom_smooth()
#very weak negative correlation
ggplot(evals.tsk1, aes(x = age, y = score)) +
geom_point() +
labs(x = "Age", y = "Score",
title = "Relationship between score and age") +
geom_smooth(method = "lm", se=FALSE)
#very weak negative correlation
ggplot(evals.tsk1, aes(x = age, y = score)) +
geom_point() +
labs(x = "Age", y = "Score",
title = "Relationship between score and age")
#2
evals.tsk2 <- linear_reg() |> fit(score ~ age, data = evals.tsk1)
tidy(evals.tsk2)
tidy(evals.tsk2$fit)
regress_tsk2 <- get_regression_points(evals.tsk2)
regress_tsk2 <- get_regression_points(evals.tsk2$fit)
ggplot(regress_tsk2, aes(x = age, y = residual)) +
geom_jitter(width = 0.1) +
labs(x = "Age", y = "residuals",
title = "Age vs Residuals") +
geom_hline(yintercept = 0, col = "blue")
ggplot(regress_tsk2, aes(x = age, y = residual)) +
geom_jitter(width = 0.1) +
labs(x = "Age", y = "residuals",
title = "Age vs Residuals") +
geom_smooth(method = "lm", se = FALSE)
ggplot(regress_tsk2, aes(x = age, y = residual)) +
geom_jitter(width = 0.2) +
labs(x = "Age", y = "residuals",
title = "Age vs Residuals") +
geom_smooth(method = "lm", se = FALSE)
ggplot(regress_tsk2, aes(x = age, y = residual)) +
geom_jitter(width = 0.5) +
labs(x = "Age", y = "residuals",
title = "Age vs Residuals") +
geom_smooth(method = "lm", se = FALSE)
#3
ggplot(regress_tsk2, aes(x = score, y = residual)) +
geom_jitter(width = 0.5) +
labs(x = "Score", y = "residuals",
title = "Score vs Residuals") +
geom_smooth(method = "lm", se = FALSE)
#2
ggplot(evals.tsk1, aes(x = age, y = score)) +
geom_point() +
labs(x = "Age", y = "Teaching Score",
title = "Relationship of age and teaching scores") +
geom_smooth(method = "lm", se = FALSE)
tidy(evals.tsk2$fit)
evals.tsk2$fit
ggplot(regress_tsk2, aes(x = score_hat, y = residual)) +
geom_jitter(width = 0.5) +
labs(x = "Score", y = "residuals",
title = "Score vs Residuals") +
geom_smooth(method = "lm", se = FALSE)
ggplot(regress_tsk2, aes(x = score_hat, y = residual)) +
geom_jitter(width = 0.5) +
labs(x = "Score", y = "residuals",
title = "Score vs Residuals") +
geom_hline(yintercept = 0)
ggplot(regress_tsk2, aes(x = score_hat, y = residual)) +
geom_jitter(width = 0.5) +
labs(x = "Score", y = "residuals",
title = "Score vs Residuals") +
geom_hline(yintercept = 0, col = "blue")
#4
gapminder1997 <- gapminder |>
filter(year == 1997) |>
select(country, continent, lifeExp)
lifeExp.continent <- gapminder1997 |>
summarize(median = median(lifeExp), mean = mean(lifeExp),.by=continent)
lifeExp.continent
lifeExp.model <- linear_reg() |> fit(lifeExp ~ continent, data = gapminder1997)
lifeExp.model
#5
Cred <- Credit |>
select(Balance, Income, Age)
Cred |>
skim()
Cred |> cor()
ggplot(Cred, aes(x = Age, y = Balance)) +
geom_point() +
labs(x = "Age (in years)", y = "Credit card balance (in $)",
title = "Relationship between balance and age") +
geom_smooth(method = "lm", se = FALSE)
Balance.model <- linear_reg() |> fit(Balance ~ Age + Income, data = Cred)
tidy(Balance.model)
regression.points <- get_regression_points(Balance.model$fit)
ggplot(regression.points, aes(x = Income, y = residual)) +
geom_point() +
labs(x = "Income (in $1000)", y = "Residual", title = "Residuals vs income")  +
geom_hline(yintercept = 0, col = "blue", size = 1)
ggplot(regression.points, aes(x = Age, y = residual)) +
geom_point() +
labs(x = "Age (in years)", y = "Residual", title = "Residuals vs age")  +
geom_hline(yintercept = 0, col = "blue", size = 1)
ggplot(regression.points, aes(x = residual)) +
geom_histogram(color = "white") +
labs(x = "Residual")
?arrange
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(fivethirtyeight)
?arrange
?inner_join
flights %>%
inner_join(planes, by = "tailnum") %>%
select(carrier, seats, distance)  %>%
summarize(TS = sum(seats, na.rm = TRUE), .by = carrier) %>%
arrange(TS)
47.09-1.69*sqrt(3.99)
47.09-1.69*(3.99)
47.09-1.69*(3.99)^2
47.09-(1.96*3.99)
47.09+(1.96*3.99)
library(moderndive)
data("teachiing")
data(teaching)
lm(score~age+gender, data = teaching)
teaching <- evals |> select(score, age, gender)
lm(score~age+gender, data = teaching)
lm(score~age*gender, data = teaching)
72.6+(0.627*39)-54.7+(0.203*39)
0.594-1.96*0.057
0.594+1.96*0.057
(0.594-0.96)-1.96(0.085-0.057)
(0.594-0.96)-1.96*(0.085-0.057)
(0.594-0.96)-1.96*(0.085+0.057)/2
(0.594-0.96)-1.96*(0.085)
(0.594-0.96)-1.96*(0.594)
---
title: "Data Analysis: Example Report"
# Exploratory Data Analysis
@sec-intro
install.packages("gt")
full.model <- lm(Sepal.Width ~ Sepal.Length*Species, data = Irs)
install.packages("sjPlot")
?parsnip
library(tidyverse)
?parsnip
??parsnip
library(tidymodels)
?parsnip
?parsnip_addin
?parsnip_update
?`parsnip-package`
?survival_reg
#| echo: true
#| output: true
#| eval: true
summary(survival_fit)
#| echo: false
library(tidyverse)
library(tidymodels)
library(parsnip)
#| eval: true
library(survival)
library(survminer)
data <- read.csv(file = "Palliativecare.csv")
head(data)
survival.data <- Surv(data$Time, data$Status==1)
survival.data
surv1 <- survfit(survival.data ~ 1, data=data, conf.type = "log-log")
#| output: true
plot(surv1, xlab="Time (days)", ylab="Survival probability", main="Estimated survival function")
surv1
#| echo: false
#| output: false
library("censored")
data <- read.csv(file = "Palliativecare.csv")
data$Sex <- as.factor(data$Sex)
data$Age <- as.factor(data$Age)
data$Care <- as.factor(data$Care)
#| echo: true
#| eval: true
survival_fit <- survreg(Surv(Time, Status) ~ Age + Care + Sex, data = data, dist = 'weibull')
#| echo: true
#| output: true
#| eval: true
summary(survival_fit)
#| echo: true
#| eval: true
surv_fit <- survival_reg(dist = "weibull") %>% set_engine("survival") %>% fit(Surv(Time, Status) ~ Sex + Age + Care, data = data)
#| echo: false
#| output: true
#| eval: true
summary(surv_fit$fit)
install.packages("PASWR")
library(PASWR)
EDA(Project14)
Project14 <- read.csv("DAProject14.csv")
setwd("C:/Users/carri/OneDrive/Documents/GitHub")
setwd("~/GitHub/Group-7-Project-14")
Project14 <- read.csv("DAProject14.csv")
EDA(Project14)
EDA(Project14$Y)
EDA(Project14$N)
EDA(Project14$Year)
Project14_means <- summarise(Project14,mean_Y = mean(Y), mean_N = mean(N), .by = Year)
Project14_means$mean_prop <- Project14_means$mean_Y/Project14_means$mean_N
library(ggplot2)
library(dplyr)
library(skimr)
library(moderndive)
Project14_means <- summarise(Project14,mean_Y = mean(Y), mean_N = mean(N), .by = Year)
Project14_means$mean_prop <- Project14_means$mean_Y/Project14_means$mean_N
EDA(Project14_means$mean_Y)
